//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace RakNet {

public class UDPProxyCoordinator : PluginInterface2 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal UDPProxyCoordinator(global::System.IntPtr cPtr, bool cMemoryOwn) : base(RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UDPProxyCoordinator obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UDPProxyCoordinator() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RakNetPINVOKE.CSharp_RakNet_delete_UDPProxyCoordinator(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static UDPProxyCoordinator GetInstance() {
    global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_GetInstance();
    UDPProxyCoordinator ret = (cPtr == global::System.IntPtr.Zero) ? null : new UDPProxyCoordinator(cPtr, false);
    return ret;
  }

  public static void DestroyInstance(UDPProxyCoordinator i) {
    RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_DestroyInstance(UDPProxyCoordinator.getCPtr(i));
  }

  public UDPProxyCoordinator() : this(RakNetPINVOKE.CSharp_RakNet_new_UDPProxyCoordinator(), true) {
  }

  public void SetRemoteLoginPassword(RakString password) {
    RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_SetRemoteLoginPassword(swigCPtr, RakString.getCPtr(password));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public class SenderAndTargetAddress : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal SenderAndTargetAddress(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SenderAndTargetAddress obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~SenderAndTargetAddress() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            RakNetPINVOKE.CSharp_RakNet_delete_UDPProxyCoordinator_SenderAndTargetAddress(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public SystemAddress senderClientAddress {
      set {
        RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_SenderAndTargetAddress_senderClientAddress_set(swigCPtr, SystemAddress.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_SenderAndTargetAddress_senderClientAddress_get(swigCPtr);
        SystemAddress ret = (cPtr == global::System.IntPtr.Zero) ? null : new SystemAddress(cPtr, false);
        return ret;
      } 
    }
  
    public RakNetGUID senderClientGuid {
      set {
        RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_SenderAndTargetAddress_senderClientGuid_set(swigCPtr, RakNetGUID.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_SenderAndTargetAddress_senderClientGuid_get(swigCPtr);
        RakNetGUID ret = (cPtr == global::System.IntPtr.Zero) ? null : new RakNetGUID(cPtr, false);
        return ret;
      } 
    }
  
    public SystemAddress targetClientAddress {
      set {
        RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_SenderAndTargetAddress_targetClientAddress_set(swigCPtr, SystemAddress.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_SenderAndTargetAddress_targetClientAddress_get(swigCPtr);
        SystemAddress ret = (cPtr == global::System.IntPtr.Zero) ? null : new SystemAddress(cPtr, false);
        return ret;
      } 
    }
  
    public RakNetGUID targetClientGuid {
      set {
        RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_SenderAndTargetAddress_targetClientGuid_set(swigCPtr, RakNetGUID.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_SenderAndTargetAddress_targetClientGuid_get(swigCPtr);
        RakNetGUID ret = (cPtr == global::System.IntPtr.Zero) ? null : new RakNetGUID(cPtr, false);
        return ret;
      } 
    }
  
    public SenderAndTargetAddress() : this(RakNetPINVOKE.CSharp_RakNet_new_UDPProxyCoordinator_SenderAndTargetAddress(), true) {
    }
  
  }

  public class ServerWithPing : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal ServerWithPing(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ServerWithPing obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~ServerWithPing() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            RakNetPINVOKE.CSharp_RakNet_delete_UDPProxyCoordinator_ServerWithPing(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public ushort ping {
      set {
        RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_ServerWithPing_ping_set(swigCPtr, value);
      } 
      get {
        ushort ret = RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_ServerWithPing_ping_get(swigCPtr);
        return ret;
      } 
    }
  
    public SystemAddress serverAddress {
      set {
        RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_ServerWithPing_serverAddress_set(swigCPtr, SystemAddress.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_ServerWithPing_serverAddress_get(swigCPtr);
        SystemAddress ret = (cPtr == global::System.IntPtr.Zero) ? null : new SystemAddress(cPtr, false);
        return ret;
      } 
    }
  
    public ServerWithPing() : this(RakNetPINVOKE.CSharp_RakNet_new_UDPProxyCoordinator_ServerWithPing(), true) {
    }
  
  }

  public class ForwardingRequest : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal ForwardingRequest(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ForwardingRequest obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~ForwardingRequest() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            RakNetPINVOKE.CSharp_RakNet_delete_UDPProxyCoordinator_ForwardingRequest(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public uint timeoutOnNoDataMS {
      set {
        RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_ForwardingRequest_timeoutOnNoDataMS_set(swigCPtr, value);
      } 
      get {
        uint ret = RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_ForwardingRequest_timeoutOnNoDataMS_get(swigCPtr);
        return ret;
      } 
    }
  
    public uint timeoutAfterSuccess {
      set {
        RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_ForwardingRequest_timeoutAfterSuccess_set(swigCPtr, value);
      } 
      get {
        uint ret = RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_ForwardingRequest_timeoutAfterSuccess_get(swigCPtr);
        return ret;
      } 
    }
  
    public UDPProxyCoordinator.SenderAndTargetAddress sata {
      set {
        RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_ForwardingRequest_sata_set(swigCPtr, UDPProxyCoordinator.SenderAndTargetAddress.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_ForwardingRequest_sata_get(swigCPtr);
        UDPProxyCoordinator.SenderAndTargetAddress ret = (cPtr == global::System.IntPtr.Zero) ? null : new UDPProxyCoordinator.SenderAndTargetAddress(cPtr, false);
        return ret;
      } 
    }
  
    public SystemAddress requestingAddress {
      set {
        RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_ForwardingRequest_requestingAddress_set(swigCPtr, SystemAddress.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_ForwardingRequest_requestingAddress_get(swigCPtr);
        SystemAddress ret = (cPtr == global::System.IntPtr.Zero) ? null : new SystemAddress(cPtr, false);
        return ret;
      } 
    }
  
    public SystemAddress currentlyAttemptedServerAddress {
      set {
        RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_ForwardingRequest_currentlyAttemptedServerAddress_set(swigCPtr, SystemAddress.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_ForwardingRequest_currentlyAttemptedServerAddress_get(swigCPtr);
        SystemAddress ret = (cPtr == global::System.IntPtr.Zero) ? null : new SystemAddress(cPtr, false);
        return ret;
      } 
    }
  
    public SWIGTYPE_p_DataStructures__QueueT_RakNet__SystemAddress_t remainingServersToTry {
      set {
        RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_ForwardingRequest_remainingServersToTry_set(swigCPtr, SWIGTYPE_p_DataStructures__QueueT_RakNet__SystemAddress_t.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_ForwardingRequest_remainingServersToTry_get(swigCPtr);
        SWIGTYPE_p_DataStructures__QueueT_RakNet__SystemAddress_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_DataStructures__QueueT_RakNet__SystemAddress_t(cPtr, false);
        return ret;
      } 
    }
  
    public BitStream serverSelectionBitstream {
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_ForwardingRequest_serverSelectionBitstream_get(swigCPtr);
        BitStream ret = (cPtr == global::System.IntPtr.Zero) ? null : new BitStream(cPtr, false);
        return ret;
      } 
    }
  
    public SWIGTYPE_p_DataStructures__ListT_RakNet__UDPProxyCoordinator__ServerWithPing_t sourceServerPings {
      set {
        RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_ForwardingRequest_sourceServerPings_set(swigCPtr, SWIGTYPE_p_DataStructures__ListT_RakNet__UDPProxyCoordinator__ServerWithPing_t.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_ForwardingRequest_sourceServerPings_get(swigCPtr);
        SWIGTYPE_p_DataStructures__ListT_RakNet__UDPProxyCoordinator__ServerWithPing_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_DataStructures__ListT_RakNet__UDPProxyCoordinator__ServerWithPing_t(cPtr, false);
        return ret;
      } 
    }
  
    public SWIGTYPE_p_DataStructures__ListT_RakNet__UDPProxyCoordinator__ServerWithPing_t targetServerPings {
      set {
        RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_ForwardingRequest_targetServerPings_set(swigCPtr, SWIGTYPE_p_DataStructures__ListT_RakNet__UDPProxyCoordinator__ServerWithPing_t.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_ForwardingRequest_targetServerPings_get(swigCPtr);
        SWIGTYPE_p_DataStructures__ListT_RakNet__UDPProxyCoordinator__ServerWithPing_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_DataStructures__ListT_RakNet__UDPProxyCoordinator__ServerWithPing_t(cPtr, false);
        return ret;
      } 
    }
  
    public uint timeRequestedPings {
      set {
        RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_ForwardingRequest_timeRequestedPings_set(swigCPtr, value);
      } 
      get {
        uint ret = RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_ForwardingRequest_timeRequestedPings_get(swigCPtr);
        return ret;
      } 
    }
  
    public void OrderRemainingServersToTry() {
      RakNetPINVOKE.CSharp_RakNet_UDPProxyCoordinator_ForwardingRequest_OrderRemainingServersToTry(swigCPtr);
    }
  
    public ForwardingRequest() : this(RakNetPINVOKE.CSharp_RakNet_new_UDPProxyCoordinator_ForwardingRequest(), true) {
    }
  
  }

}

}
