//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace RakNet {

public class TransportInterface : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TransportInterface(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TransportInterface obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~TransportInterface() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RakNetPINVOKE.CSharp_RakNet_delete_TransportInterface(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual bool Start(ushort port, bool serverMode) {
    bool ret = RakNetPINVOKE.CSharp_RakNet_TransportInterface_Start(swigCPtr, port, serverMode);
    return ret;
  }

  public virtual void Stop() {
    RakNetPINVOKE.CSharp_RakNet_TransportInterface_Stop(swigCPtr);
  }

  public virtual void CloseConnection(SystemAddress systemAddress) {
    RakNetPINVOKE.CSharp_RakNet_TransportInterface_CloseConnection(swigCPtr, SystemAddress.getCPtr(systemAddress));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Packet Receive() {
    global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_TransportInterface_Receive(swigCPtr);
    Packet ret = (cPtr == global::System.IntPtr.Zero) ? null : new Packet(cPtr, false);
    return ret;
  }

  public virtual void DeallocatePacket(Packet packet) {
    RakNetPINVOKE.CSharp_RakNet_TransportInterface_DeallocatePacket(swigCPtr, Packet.getCPtr(packet));
  }

  public virtual SystemAddress HasNewIncomingConnection() {
    SystemAddress ret = new SystemAddress(RakNetPINVOKE.CSharp_RakNet_TransportInterface_HasNewIncomingConnection(swigCPtr), true);
    return ret;
  }

  public virtual SystemAddress HasLostConnection() {
    SystemAddress ret = new SystemAddress(RakNetPINVOKE.CSharp_RakNet_TransportInterface_HasLostConnection(swigCPtr), true);
    return ret;
  }

  public virtual CommandParserInterface GetCommandParser() {
    global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_TransportInterface_GetCommandParser(swigCPtr);
    CommandParserInterface ret = (cPtr == global::System.IntPtr.Zero) ? null : new CommandParserInterface(cPtr, false);
    return ret;
  }

  public void Send(SystemAddress systemAddress, byte[] inByteArray) {
    RakNetPINVOKE.CSharp_RakNet_TransportInterface_Send(swigCPtr, SystemAddress.getCPtr(systemAddress), inByteArray);
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
