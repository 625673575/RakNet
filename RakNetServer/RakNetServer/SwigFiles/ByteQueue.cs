//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
namespace RakNet {

public class ByteQueue : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ByteQueue(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ByteQueue obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ByteQueue() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RakNetPINVOKE.CSharp_RakNet_delete_ByteQueue(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

	public byte[] PeekContiguousBytes(out uint outLength) 
	{
		return PeekContiguousBytesHelper(out outLength);
	}

  public ByteQueue() : this(RakNetPINVOKE.CSharp_RakNet_new_ByteQueue(), true) {
  }

  public uint GetBytesWritten() {
    uint ret = RakNetPINVOKE.CSharp_RakNet_ByteQueue_GetBytesWritten(swigCPtr);
    return ret;
  }

  public void IncrementReadOffset(uint length) {
    RakNetPINVOKE.CSharp_RakNet_ByteQueue_IncrementReadOffset(swigCPtr, length);
  }

  public void DecrementReadOffset(uint length) {
    RakNetPINVOKE.CSharp_RakNet_ByteQueue_DecrementReadOffset(swigCPtr, length);
  }

  public void Clear(string file, uint line) {
    RakNetPINVOKE.CSharp_RakNet_ByteQueue_Clear(swigCPtr, file, line);
  }

  public void Print() {
    RakNetPINVOKE.CSharp_RakNet_ByteQueue_Print(swigCPtr);
  }

  public void WriteBytes(byte[] inByteArray, uint length, string file, uint line) {
    RakNetPINVOKE.CSharp_RakNet_ByteQueue_WriteBytes(swigCPtr, inByteArray, length, file, line);
  }

  public bool ReadBytes(byte[] inOutByteArray, uint maxLengthToRead, bool peek) {
    bool ret = RakNetPINVOKE.CSharp_RakNet_ByteQueue_ReadBytes(swigCPtr, inOutByteArray, maxLengthToRead, peek);
    return ret;
  }

  private byte[] PeekContiguousBytesHelper(out uint outLength) 
  {
      IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_ByteQueue_PeekContiguousBytesHelper(swigCPtr, out outLength);
      int len = (int)outLength;
      if (len <= 0)
      {
          return null;
      }
      byte[] returnBytes = new byte[len];
      Marshal.Copy(cPtr, returnBytes, 0, len);
      return returnBytes;
  }


}

}
