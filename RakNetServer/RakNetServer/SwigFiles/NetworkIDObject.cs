//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
namespace RakNet {

public class NetworkIDObject : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal NetworkIDObject(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(NetworkIDObject obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~NetworkIDObject() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RakNetPINVOKE.CSharp_RakNet_delete_NetworkIDObject(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  NetworkIDManager oldManager;
  public virtual void SetNetworkIDManager(NetworkIDManager manager) 
  {
      if (oldManager != null)
      {
          oldManager.pointerDictionary.Remove(GetIntPtr());
      }
      if (manager != null)
      {
          manager.pointerDictionary.Add(GetIntPtr(), this);
          oldManager = manager;
      }
      SetNetworkIDManagerOrig(manager);
  }

  public IntPtr GetIntPtr()
  {
      return swigCPtr.Handle;
  }

  public NetworkIDObject() : this(RakNetPINVOKE.CSharp_RakNet_new_NetworkIDObject(), true) {
    SwigDirectorConnect();
  }

  protected void SetNetworkIDManagerOrig(NetworkIDManager manager) {
    if (SwigDerivedClassHasMethod("SetNetworkIDManagerOrig", swigMethodTypes0)) RakNetPINVOKE.CSharp_RakNet_NetworkIDObject_SetNetworkIDManagerOrigSwigExplicitNetworkIDObject(swigCPtr, NetworkIDManager.getCPtr(manager)); else RakNetPINVOKE.CSharp_RakNet_NetworkIDObject_SetNetworkIDManagerOrig(swigCPtr, NetworkIDManager.getCPtr(manager));
  }

  public virtual NetworkIDManager GetNetworkIDManager() {
    global::System.IntPtr cPtr = (SwigDerivedClassHasMethod("GetNetworkIDManager", swigMethodTypes1) ? RakNetPINVOKE.CSharp_RakNet_NetworkIDObject_GetNetworkIDManagerSwigExplicitNetworkIDObject(swigCPtr) : RakNetPINVOKE.CSharp_RakNet_NetworkIDObject_GetNetworkIDManager(swigCPtr));
    NetworkIDManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new NetworkIDManager(cPtr, false);
    return ret;
  }

  public virtual ulong GetNetworkID() {
    ulong ret = (SwigDerivedClassHasMethod("GetNetworkID", swigMethodTypes2) ? RakNetPINVOKE.CSharp_RakNet_NetworkIDObject_GetNetworkIDSwigExplicitNetworkIDObject(swigCPtr) : RakNetPINVOKE.CSharp_RakNet_NetworkIDObject_GetNetworkID(swigCPtr));
    return ret;
  }

  public virtual void SetNetworkID(ulong id) {
    if (SwigDerivedClassHasMethod("SetNetworkID", swigMethodTypes3)) RakNetPINVOKE.CSharp_RakNet_NetworkIDObject_SetNetworkIDSwigExplicitNetworkIDObject(swigCPtr, id); else RakNetPINVOKE.CSharp_RakNet_NetworkIDObject_SetNetworkID(swigCPtr, id);
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("SetNetworkIDManagerOrig", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateNetworkIDObject_0(SwigDirectorSetNetworkIDManagerOrig);
    if (SwigDerivedClassHasMethod("GetNetworkIDManager", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateNetworkIDObject_1(SwigDirectorGetNetworkIDManager);
    if (SwigDerivedClassHasMethod("GetNetworkID", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateNetworkIDObject_2(SwigDirectorGetNetworkID);
    if (SwigDerivedClassHasMethod("SetNetworkID", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateNetworkIDObject_3(SwigDirectorSetNetworkID);
    RakNetPINVOKE.CSharp_RakNet_NetworkIDObject_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(NetworkIDObject));
    return hasDerivedMethod;
  }

  private void SwigDirectorSetNetworkIDManagerOrig(global::System.IntPtr manager) {
    SetNetworkIDManagerOrig((manager == global::System.IntPtr.Zero) ? null : new NetworkIDManager(manager, false));
  }

  private global::System.IntPtr SwigDirectorGetNetworkIDManager() {
    return NetworkIDManager.getCPtr(GetNetworkIDManager()).Handle;
  }

  private ulong SwigDirectorGetNetworkID() {
    return GetNetworkID();
  }

  private void SwigDirectorSetNetworkID(ulong id) {
    SetNetworkID(id);
  }

  public delegate void SwigDelegateNetworkIDObject_0(global::System.IntPtr manager);
  public delegate global::System.IntPtr SwigDelegateNetworkIDObject_1();
  public delegate ulong SwigDelegateNetworkIDObject_2();
  public delegate void SwigDelegateNetworkIDObject_3(ulong id);

  private SwigDelegateNetworkIDObject_0 swigDelegate0;
  private SwigDelegateNetworkIDObject_1 swigDelegate1;
  private SwigDelegateNetworkIDObject_2 swigDelegate2;
  private SwigDelegateNetworkIDObject_3 swigDelegate3;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(NetworkIDManager) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(ulong) };
}

}
