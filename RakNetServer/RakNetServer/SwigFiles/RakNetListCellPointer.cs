//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace RakNet {

public class RakNetListCellPointer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RakNetListCellPointer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RakNetListCellPointer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~RakNetListCellPointer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RakNetPINVOKE.CSharp_RakNet_delete_RakNetListCellPointer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

    public Cell this[int index]  
    {  
        get   
        {
            return Get((uint)index); // use indexto retrieve and return another value.    
        }  
        set   
        {
            Replace(value, value, (uint)index, "Not used", 0);// use index and value to set the value somewhere.   
        }  
    }


    public Cell Get(uint position) 
    {   
	return GetHelper(position);
    }

    public Cell Pop()
    {
	return PopHelper();
    }


  public RakNetListCellPointer() : this(RakNetPINVOKE.CSharp_RakNet_new_RakNetListCellPointer__SWIG_0(), true) {
  }

  public RakNetListCellPointer(RakNetListCellPointer original_copy) : this(RakNetPINVOKE.CSharp_RakNet_new_RakNetListCellPointer__SWIG_1(RakNetListCellPointer.getCPtr(original_copy)), true) {
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public RakNetListCellPointer CopyData(RakNetListCellPointer original_copy) {
    RakNetListCellPointer ret = new RakNetListCellPointer(RakNetPINVOKE.CSharp_RakNet_RakNetListCellPointer_CopyData(swigCPtr, RakNetListCellPointer.getCPtr(original_copy)), false);
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Push(Cell input, string file, uint line) {
    RakNetPINVOKE.CSharp_RakNet_RakNetListCellPointer_Push(swigCPtr, Cell.getCPtr(input), file, line);
  }

  public void Insert(Cell input, uint position, string file, uint line) {
    RakNetPINVOKE.CSharp_RakNet_RakNetListCellPointer_Insert__SWIG_0(swigCPtr, Cell.getCPtr(input), position, file, line);
  }

  public void Insert(Cell input, string file, uint line) {
    RakNetPINVOKE.CSharp_RakNet_RakNetListCellPointer_Insert__SWIG_1(swigCPtr, Cell.getCPtr(input), file, line);
  }

  public void Replace(Cell input, Cell filler, uint position, string file, uint line) {
    RakNetPINVOKE.CSharp_RakNet_RakNetListCellPointer_Replace__SWIG_0(swigCPtr, Cell.getCPtr(input), Cell.getCPtr(filler), position, file, line);
  }

  public void Replace(Cell input) {
    RakNetPINVOKE.CSharp_RakNet_RakNetListCellPointer_Replace__SWIG_1(swigCPtr, Cell.getCPtr(input));
  }

  public void RemoveAtIndex(uint position) {
    RakNetPINVOKE.CSharp_RakNet_RakNetListCellPointer_RemoveAtIndex(swigCPtr, position);
  }

  public void RemoveAtIndexFast(uint position) {
    RakNetPINVOKE.CSharp_RakNet_RakNetListCellPointer_RemoveAtIndexFast(swigCPtr, position);
  }

  public void RemoveFromEnd(uint num) {
    RakNetPINVOKE.CSharp_RakNet_RakNetListCellPointer_RemoveFromEnd__SWIG_0(swigCPtr, num);
  }

  public void RemoveFromEnd() {
    RakNetPINVOKE.CSharp_RakNet_RakNetListCellPointer_RemoveFromEnd__SWIG_1(swigCPtr);
  }

  public uint GetIndexOf(Cell input) {
    uint ret = RakNetPINVOKE.CSharp_RakNet_RakNetListCellPointer_GetIndexOf(swigCPtr, Cell.getCPtr(input));
    return ret;
  }

  public uint Size() {
    uint ret = RakNetPINVOKE.CSharp_RakNet_RakNetListCellPointer_Size(swigCPtr);
    return ret;
  }

  public void Clear(bool doNotDeallocateSmallBlocks, string file, uint line) {
    RakNetPINVOKE.CSharp_RakNet_RakNetListCellPointer_Clear(swigCPtr, doNotDeallocateSmallBlocks, file, line);
  }

  public void Preallocate(uint countNeeded, string file, uint line) {
    RakNetPINVOKE.CSharp_RakNet_RakNetListCellPointer_Preallocate(swigCPtr, countNeeded, file, line);
  }

  public void Compress(string file, uint line) {
    RakNetPINVOKE.CSharp_RakNet_RakNetListCellPointer_Compress(swigCPtr, file, line);
  }

  public Cell GetHelper(uint position) {
    global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_RakNetListCellPointer_GetHelper(swigCPtr, position);
    Cell ret = (cPtr == global::System.IntPtr.Zero) ? null : new Cell(cPtr, false);
    return ret;
  }

  public Cell PopHelper() {
    global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_RakNetListCellPointer_PopHelper(swigCPtr);
    Cell ret = (cPtr == global::System.IntPtr.Zero) ? null : new Cell(cPtr, false);
    return ret;
  }

}

}
