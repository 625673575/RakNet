//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace RakNet {

public class RakWString : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RakWString(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RakWString obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~RakWString() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RakNetPINVOKE.CSharp_RakNet_delete_RakWString(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public RakWString() : this(RakNetPINVOKE.CSharp_RakNet_new_RakWString__SWIG_0(), true) {
  }

  public RakWString(RakString right) : this(RakNetPINVOKE.CSharp_RakNet_new_RakWString__SWIG_1(RakString.getCPtr(right)), true) {
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public RakWString(SWIGTYPE_p_wchar_t input) : this(RakNetPINVOKE.CSharp_RakNet_new_RakWString__SWIG_2(SWIGTYPE_p_wchar_t.getCPtr(input)), true) {
  }

  public RakWString(RakWString right) : this(RakNetPINVOKE.CSharp_RakNet_new_RakWString__SWIG_3(RakWString.getCPtr(right)), true) {
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public RakWString(string input) : this(RakNetPINVOKE.CSharp_RakNet_new_RakWString__SWIG_4(input), true) {
  }

  public SWIGTYPE_p_wchar_t C_String() {
    global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_RakWString_C_String(swigCPtr);
    SWIGTYPE_p_wchar_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
    return ret;
  }

  public RakWString CopyData(RakWString right) {
    RakWString ret = new RakWString(RakNetPINVOKE.CSharp_RakNet_RakWString_CopyData__SWIG_0(swigCPtr, RakWString.getCPtr(right)), false);
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RakWString CopyData(RakString right) {
    RakWString ret = new RakWString(RakNetPINVOKE.CSharp_RakNet_RakWString_CopyData__SWIG_1(swigCPtr, RakString.getCPtr(right)), false);
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RakWString CopyData(SWIGTYPE_p_wchar_t str) {
    RakWString ret = new RakWString(RakNetPINVOKE.CSharp_RakNet_RakWString_CopyData__SWIG_2(swigCPtr, SWIGTYPE_p_wchar_t.getCPtr(str)), false);
    return ret;
  }

  public RakWString CopyData(string str) {
    RakWString ret = new RakWString(RakNetPINVOKE.CSharp_RakNet_RakWString_CopyData__SWIG_4(swigCPtr, str), false);
    return ret;
  }

  public bool Equals(RakWString right) {
    bool ret = RakNetPINVOKE.CSharp_RakNet_RakWString_Equals(swigCPtr, RakWString.getCPtr(right));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private bool OpLess(RakWString right) {
    bool ret = RakNetPINVOKE.CSharp_RakNet_RakWString_OpLess(swigCPtr, RakWString.getCPtr(right));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private bool OpLessEquals(RakWString right) {
    bool ret = RakNetPINVOKE.CSharp_RakNet_RakWString_OpLessEquals(swigCPtr, RakWString.getCPtr(right));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private bool OpGreater(RakWString right) {
    bool ret = RakNetPINVOKE.CSharp_RakNet_RakWString_OpGreater(swigCPtr, RakWString.getCPtr(right));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private bool OpGreaterEquals(RakWString right) {
    bool ret = RakNetPINVOKE.CSharp_RakNet_RakWString_OpGreaterEquals(swigCPtr, RakWString.getCPtr(right));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private bool OpNotEqual(RakWString right) {
    bool ret = RakNetPINVOKE.CSharp_RakNet_RakWString_OpNotEqual(swigCPtr, RakWString.getCPtr(right));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Set(SWIGTYPE_p_wchar_t str) {
    RakNetPINVOKE.CSharp_RakNet_RakWString_Set(swigCPtr, SWIGTYPE_p_wchar_t.getCPtr(str));
  }

  public bool IsEmpty() {
    bool ret = RakNetPINVOKE.CSharp_RakNet_RakWString_IsEmpty(swigCPtr);
    return ret;
  }

  public uint GetLength() {
    uint ret = RakNetPINVOKE.CSharp_RakNet_RakWString_GetLength(swigCPtr);
    return ret;
  }

  public static uint ToInteger(RakWString rs) {
    uint ret = RakNetPINVOKE.CSharp_RakNet_RakWString_ToInteger(RakWString.getCPtr(rs));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int StrCmp(RakWString right) {
    int ret = RakNetPINVOKE.CSharp_RakNet_RakWString_StrCmp(swigCPtr, RakWString.getCPtr(right));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int StrICmp(RakWString right) {
    int ret = RakNetPINVOKE.CSharp_RakNet_RakWString_StrICmp(swigCPtr, RakWString.getCPtr(right));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Clear() {
    RakNetPINVOKE.CSharp_RakNet_RakWString_Clear(swigCPtr);
  }

  public void Printf() {
    RakNetPINVOKE.CSharp_RakNet_RakWString_Printf(swigCPtr);
  }

  public void FPrintf(SWIGTYPE_p_FILE fp) {
    RakNetPINVOKE.CSharp_RakNet_RakWString_FPrintf(swigCPtr, SWIGTYPE_p_FILE.getCPtr(fp));
  }

  public void Serialize(BitStream bs) {
    RakNetPINVOKE.CSharp_RakNet_RakWString_Serialize__SWIG_0(swigCPtr, BitStream.getCPtr(bs));
  }

  public static void Serialize(SWIGTYPE_p_wchar_t str, BitStream bs) {
    RakNetPINVOKE.CSharp_RakNet_RakWString_Serialize__SWIG_1(SWIGTYPE_p_wchar_t.getCPtr(str), BitStream.getCPtr(bs));
  }

  public bool Deserialize(BitStream bs) {
    bool ret = RakNetPINVOKE.CSharp_RakNet_RakWString_Deserialize__SWIG_0(swigCPtr, BitStream.getCPtr(bs));
    return ret;
  }

  public static bool Deserialize(SWIGTYPE_p_wchar_t str, BitStream bs) {
    bool ret = RakNetPINVOKE.CSharp_RakNet_RakWString_Deserialize__SWIG_1(SWIGTYPE_p_wchar_t.getCPtr(str), BitStream.getCPtr(bs));
    return ret;
  }

}

}
