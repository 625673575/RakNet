//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
namespace RakNet {

public class Cell : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Cell(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Cell obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Cell() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RakNetPINVOKE.CSharp_RakNet_delete_Cell(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

 	public void Get(out string output)
 	{
 		string temp=new String('c', (int) this.i);
 		output=GetHelper(temp);
 	}
 
  public Cell() : this(RakNetPINVOKE.CSharp_RakNet_new_Cell__SWIG_0(), true) {
  }

  public void Clear() {
    RakNetPINVOKE.CSharp_RakNet_Cell_Clear(swigCPtr);
  }

  public void Set(int input) {
    RakNetPINVOKE.CSharp_RakNet_Cell_Set__SWIG_0(swigCPtr, input);
  }

  public void Set(uint input) {
    RakNetPINVOKE.CSharp_RakNet_Cell_Set__SWIG_1(swigCPtr, input);
  }

  public void Set(double input) {
    RakNetPINVOKE.CSharp_RakNet_Cell_Set__SWIG_2(swigCPtr, input);
  }

  public void Set(string input) {
    RakNetPINVOKE.CSharp_RakNet_Cell_Set__SWIG_3(swigCPtr, input);
  }

  public void Get(out int output) {
    RakNetPINVOKE.CSharp_RakNet_Cell_Get__SWIG_0(swigCPtr, out output);
  }

  public void Get(out double output) {
    RakNetPINVOKE.CSharp_RakNet_Cell_Get__SWIG_1(swigCPtr, out output);
  }

  public RakString ToString(Table.ColumnType columnType) {
    RakString ret = new RakString(RakNetPINVOKE.CSharp_RakNet_Cell_ToString(swigCPtr, (int)columnType), true);
    return ret;
  }

  public Cell CopyData(Cell input) {
    Cell ret = new Cell(RakNetPINVOKE.CSharp_RakNet_Cell_CopyData(swigCPtr, Cell.getCPtr(input)), false);
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Cell(Cell input) : this(RakNetPINVOKE.CSharp_RakNet_new_Cell__SWIG_1(Cell.getCPtr(input)), true) {
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public Table.ColumnType EstimateColumnType() {
    Table.ColumnType ret = (Table.ColumnType)RakNetPINVOKE.CSharp_RakNet_Cell_EstimateColumnType(swigCPtr);
    return ret;
  }

  public bool isEmpty {
    set {
      RakNetPINVOKE.CSharp_RakNet_Cell_isEmpty_set(swigCPtr, value);
    } 
    get {
      bool ret = RakNetPINVOKE.CSharp_RakNet_Cell_isEmpty_get(swigCPtr);
      return ret;
    } 
  }

  public double i {
    set {
      RakNetPINVOKE.CSharp_RakNet_Cell_i_set(swigCPtr, value);
    } 
    get {
      double ret = RakNetPINVOKE.CSharp_RakNet_Cell_i_get(swigCPtr);
      return ret;
    } 
  }

  public void Set(byte[] inByteArray, int inputLength) {
    RakNetPINVOKE.CSharp_RakNet_Cell_Set__SWIG_4(swigCPtr, inByteArray, inputLength);
  }

  public void Get(byte[] inOutByteArray, out int outputLength) {
    RakNetPINVOKE.CSharp_RakNet_Cell_Get__SWIG_2(swigCPtr, inOutByteArray, out outputLength);
  }

  private string GetHelper(string output) {
    string ret = RakNetPINVOKE.CSharp_RakNet_Cell_GetHelper(swigCPtr, output);
    return ret;
  }

}

}
