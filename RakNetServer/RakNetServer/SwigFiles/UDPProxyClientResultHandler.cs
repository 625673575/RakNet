//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace RakNet {

public class UDPProxyClientResultHandler : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal UDPProxyClientResultHandler(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UDPProxyClientResultHandler obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UDPProxyClientResultHandler() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RakNetPINVOKE.CSharp_RakNet_delete_UDPProxyClientResultHandler(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public UDPProxyClientResultHandler() : this(RakNetPINVOKE.CSharp_RakNet_new_UDPProxyClientResultHandler(), true) {
    SwigDirectorConnect();
  }

  public virtual void OnForwardingSuccess(string proxyIPAddress, ushort proxyPort, SystemAddress proxyCoordinator, SystemAddress sourceAddress, SystemAddress targetAddress, RakNetGUID targetGuid, UDPProxyClient proxyClientPlugin) {
    RakNetPINVOKE.CSharp_RakNet_UDPProxyClientResultHandler_OnForwardingSuccess(swigCPtr, proxyIPAddress, proxyPort, SystemAddress.getCPtr(proxyCoordinator), SystemAddress.getCPtr(sourceAddress), SystemAddress.getCPtr(targetAddress), RakNetGUID.getCPtr(targetGuid), UDPProxyClient.getCPtr(proxyClientPlugin));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnForwardingNotification(string proxyIPAddress, ushort proxyPort, SystemAddress proxyCoordinator, SystemAddress sourceAddress, SystemAddress targetAddress, RakNetGUID targetGuid, UDPProxyClient proxyClientPlugin) {
    RakNetPINVOKE.CSharp_RakNet_UDPProxyClientResultHandler_OnForwardingNotification(swigCPtr, proxyIPAddress, proxyPort, SystemAddress.getCPtr(proxyCoordinator), SystemAddress.getCPtr(sourceAddress), SystemAddress.getCPtr(targetAddress), RakNetGUID.getCPtr(targetGuid), UDPProxyClient.getCPtr(proxyClientPlugin));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnNoServersOnline(SystemAddress proxyCoordinator, SystemAddress sourceAddress, SystemAddress targetAddress, RakNetGUID targetGuid, UDPProxyClient proxyClientPlugin) {
    RakNetPINVOKE.CSharp_RakNet_UDPProxyClientResultHandler_OnNoServersOnline(swigCPtr, SystemAddress.getCPtr(proxyCoordinator), SystemAddress.getCPtr(sourceAddress), SystemAddress.getCPtr(targetAddress), RakNetGUID.getCPtr(targetGuid), UDPProxyClient.getCPtr(proxyClientPlugin));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnRecipientNotConnected(SystemAddress proxyCoordinator, SystemAddress sourceAddress, SystemAddress targetAddress, RakNetGUID targetGuid, UDPProxyClient proxyClientPlugin) {
    RakNetPINVOKE.CSharp_RakNet_UDPProxyClientResultHandler_OnRecipientNotConnected(swigCPtr, SystemAddress.getCPtr(proxyCoordinator), SystemAddress.getCPtr(sourceAddress), SystemAddress.getCPtr(targetAddress), RakNetGUID.getCPtr(targetGuid), UDPProxyClient.getCPtr(proxyClientPlugin));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnAllServersBusy(SystemAddress proxyCoordinator, SystemAddress sourceAddress, SystemAddress targetAddress, RakNetGUID targetGuid, UDPProxyClient proxyClientPlugin) {
    RakNetPINVOKE.CSharp_RakNet_UDPProxyClientResultHandler_OnAllServersBusy(swigCPtr, SystemAddress.getCPtr(proxyCoordinator), SystemAddress.getCPtr(sourceAddress), SystemAddress.getCPtr(targetAddress), RakNetGUID.getCPtr(targetGuid), UDPProxyClient.getCPtr(proxyClientPlugin));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnForwardingInProgress(string proxyIPAddress, ushort proxyPort, SystemAddress proxyCoordinator, SystemAddress sourceAddress, SystemAddress targetAddress, RakNetGUID targetGuid, UDPProxyClient proxyClientPlugin) {
    RakNetPINVOKE.CSharp_RakNet_UDPProxyClientResultHandler_OnForwardingInProgress(swigCPtr, proxyIPAddress, proxyPort, SystemAddress.getCPtr(proxyCoordinator), SystemAddress.getCPtr(sourceAddress), SystemAddress.getCPtr(targetAddress), RakNetGUID.getCPtr(targetGuid), UDPProxyClient.getCPtr(proxyClientPlugin));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("OnForwardingSuccess", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateUDPProxyClientResultHandler_0(SwigDirectorOnForwardingSuccess);
    if (SwigDerivedClassHasMethod("OnForwardingNotification", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateUDPProxyClientResultHandler_1(SwigDirectorOnForwardingNotification);
    if (SwigDerivedClassHasMethod("OnNoServersOnline", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateUDPProxyClientResultHandler_2(SwigDirectorOnNoServersOnline);
    if (SwigDerivedClassHasMethod("OnRecipientNotConnected", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateUDPProxyClientResultHandler_3(SwigDirectorOnRecipientNotConnected);
    if (SwigDerivedClassHasMethod("OnAllServersBusy", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateUDPProxyClientResultHandler_4(SwigDirectorOnAllServersBusy);
    if (SwigDerivedClassHasMethod("OnForwardingInProgress", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateUDPProxyClientResultHandler_5(SwigDirectorOnForwardingInProgress);
    RakNetPINVOKE.CSharp_RakNet_UDPProxyClientResultHandler_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(UDPProxyClientResultHandler));
    return hasDerivedMethod;
  }

  private void SwigDirectorOnForwardingSuccess(string proxyIPAddress, ushort proxyPort, global::System.IntPtr proxyCoordinator, global::System.IntPtr sourceAddress, global::System.IntPtr targetAddress, global::System.IntPtr targetGuid, global::System.IntPtr proxyClientPlugin) {
    OnForwardingSuccess(proxyIPAddress, proxyPort, new SystemAddress(proxyCoordinator, true), new SystemAddress(sourceAddress, true), new SystemAddress(targetAddress, true), new RakNetGUID(targetGuid, true), (proxyClientPlugin == global::System.IntPtr.Zero) ? null : new UDPProxyClient(proxyClientPlugin, false));
  }

  private void SwigDirectorOnForwardingNotification(string proxyIPAddress, ushort proxyPort, global::System.IntPtr proxyCoordinator, global::System.IntPtr sourceAddress, global::System.IntPtr targetAddress, global::System.IntPtr targetGuid, global::System.IntPtr proxyClientPlugin) {
    OnForwardingNotification(proxyIPAddress, proxyPort, new SystemAddress(proxyCoordinator, true), new SystemAddress(sourceAddress, true), new SystemAddress(targetAddress, true), new RakNetGUID(targetGuid, true), (proxyClientPlugin == global::System.IntPtr.Zero) ? null : new UDPProxyClient(proxyClientPlugin, false));
  }

  private void SwigDirectorOnNoServersOnline(global::System.IntPtr proxyCoordinator, global::System.IntPtr sourceAddress, global::System.IntPtr targetAddress, global::System.IntPtr targetGuid, global::System.IntPtr proxyClientPlugin) {
    OnNoServersOnline(new SystemAddress(proxyCoordinator, true), new SystemAddress(sourceAddress, true), new SystemAddress(targetAddress, true), new RakNetGUID(targetGuid, true), (proxyClientPlugin == global::System.IntPtr.Zero) ? null : new UDPProxyClient(proxyClientPlugin, false));
  }

  private void SwigDirectorOnRecipientNotConnected(global::System.IntPtr proxyCoordinator, global::System.IntPtr sourceAddress, global::System.IntPtr targetAddress, global::System.IntPtr targetGuid, global::System.IntPtr proxyClientPlugin) {
    OnRecipientNotConnected(new SystemAddress(proxyCoordinator, true), new SystemAddress(sourceAddress, true), new SystemAddress(targetAddress, true), new RakNetGUID(targetGuid, true), (proxyClientPlugin == global::System.IntPtr.Zero) ? null : new UDPProxyClient(proxyClientPlugin, false));
  }

  private void SwigDirectorOnAllServersBusy(global::System.IntPtr proxyCoordinator, global::System.IntPtr sourceAddress, global::System.IntPtr targetAddress, global::System.IntPtr targetGuid, global::System.IntPtr proxyClientPlugin) {
    OnAllServersBusy(new SystemAddress(proxyCoordinator, true), new SystemAddress(sourceAddress, true), new SystemAddress(targetAddress, true), new RakNetGUID(targetGuid, true), (proxyClientPlugin == global::System.IntPtr.Zero) ? null : new UDPProxyClient(proxyClientPlugin, false));
  }

  private void SwigDirectorOnForwardingInProgress(string proxyIPAddress, ushort proxyPort, global::System.IntPtr proxyCoordinator, global::System.IntPtr sourceAddress, global::System.IntPtr targetAddress, global::System.IntPtr targetGuid, global::System.IntPtr proxyClientPlugin) {
    OnForwardingInProgress(proxyIPAddress, proxyPort, new SystemAddress(proxyCoordinator, true), new SystemAddress(sourceAddress, true), new SystemAddress(targetAddress, true), new RakNetGUID(targetGuid, true), (proxyClientPlugin == global::System.IntPtr.Zero) ? null : new UDPProxyClient(proxyClientPlugin, false));
  }

  public delegate void SwigDelegateUDPProxyClientResultHandler_0(string proxyIPAddress, ushort proxyPort, global::System.IntPtr proxyCoordinator, global::System.IntPtr sourceAddress, global::System.IntPtr targetAddress, global::System.IntPtr targetGuid, global::System.IntPtr proxyClientPlugin);
  public delegate void SwigDelegateUDPProxyClientResultHandler_1(string proxyIPAddress, ushort proxyPort, global::System.IntPtr proxyCoordinator, global::System.IntPtr sourceAddress, global::System.IntPtr targetAddress, global::System.IntPtr targetGuid, global::System.IntPtr proxyClientPlugin);
  public delegate void SwigDelegateUDPProxyClientResultHandler_2(global::System.IntPtr proxyCoordinator, global::System.IntPtr sourceAddress, global::System.IntPtr targetAddress, global::System.IntPtr targetGuid, global::System.IntPtr proxyClientPlugin);
  public delegate void SwigDelegateUDPProxyClientResultHandler_3(global::System.IntPtr proxyCoordinator, global::System.IntPtr sourceAddress, global::System.IntPtr targetAddress, global::System.IntPtr targetGuid, global::System.IntPtr proxyClientPlugin);
  public delegate void SwigDelegateUDPProxyClientResultHandler_4(global::System.IntPtr proxyCoordinator, global::System.IntPtr sourceAddress, global::System.IntPtr targetAddress, global::System.IntPtr targetGuid, global::System.IntPtr proxyClientPlugin);
  public delegate void SwigDelegateUDPProxyClientResultHandler_5(string proxyIPAddress, ushort proxyPort, global::System.IntPtr proxyCoordinator, global::System.IntPtr sourceAddress, global::System.IntPtr targetAddress, global::System.IntPtr targetGuid, global::System.IntPtr proxyClientPlugin);

  private SwigDelegateUDPProxyClientResultHandler_0 swigDelegate0;
  private SwigDelegateUDPProxyClientResultHandler_1 swigDelegate1;
  private SwigDelegateUDPProxyClientResultHandler_2 swigDelegate2;
  private SwigDelegateUDPProxyClientResultHandler_3 swigDelegate3;
  private SwigDelegateUDPProxyClientResultHandler_4 swigDelegate4;
  private SwigDelegateUDPProxyClientResultHandler_5 swigDelegate5;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(string), typeof(ushort), typeof(SystemAddress), typeof(SystemAddress), typeof(SystemAddress), typeof(RakNetGUID), typeof(UDPProxyClient) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(string), typeof(ushort), typeof(SystemAddress), typeof(SystemAddress), typeof(SystemAddress), typeof(RakNetGUID), typeof(UDPProxyClient) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(SystemAddress), typeof(SystemAddress), typeof(SystemAddress), typeof(RakNetGUID), typeof(UDPProxyClient) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(SystemAddress), typeof(SystemAddress), typeof(SystemAddress), typeof(RakNetGUID), typeof(UDPProxyClient) };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(SystemAddress), typeof(SystemAddress), typeof(SystemAddress), typeof(RakNetGUID), typeof(UDPProxyClient) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(string), typeof(ushort), typeof(SystemAddress), typeof(SystemAddress), typeof(SystemAddress), typeof(RakNetGUID), typeof(UDPProxyClient) };
}

}
