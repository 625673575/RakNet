//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace RakNet {

public class SocketDescriptor : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SocketDescriptor(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SocketDescriptor obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SocketDescriptor() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RakNetPINVOKE.CSharp_RakNet_delete_SocketDescriptor(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SocketDescriptor() : this(RakNetPINVOKE.CSharp_RakNet_new_SocketDescriptor__SWIG_0(), true) {
  }

  public SocketDescriptor(ushort _port, string _hostAddress) : this(RakNetPINVOKE.CSharp_RakNet_new_SocketDescriptor__SWIG_1(_port, _hostAddress), true) {
  }

  public ushort port {
    set {
      RakNetPINVOKE.CSharp_RakNet_SocketDescriptor_port_set(swigCPtr, value);
    } 
    get {
      ushort ret = RakNetPINVOKE.CSharp_RakNet_SocketDescriptor_port_get(swigCPtr);
      return ret;
    } 
  }

  public string hostAddress {
    set {
      RakNetPINVOKE.CSharp_RakNet_SocketDescriptor_hostAddress_set(swigCPtr, value);
    } 
    get {
      string ret = RakNetPINVOKE.CSharp_RakNet_SocketDescriptor_hostAddress_get(swigCPtr);
      return ret;
    } 
  }

  public short socketFamily {
    set {
      RakNetPINVOKE.CSharp_RakNet_SocketDescriptor_socketFamily_set(swigCPtr, value);
    } 
    get {
      short ret = RakNetPINVOKE.CSharp_RakNet_SocketDescriptor_socketFamily_get(swigCPtr);
      return ret;
    } 
  }

  public ushort remotePortRakNetWasStartedOn_PS3_PSP2 {
    set {
      RakNetPINVOKE.CSharp_RakNet_SocketDescriptor_remotePortRakNetWasStartedOn_PS3_PSP2_set(swigCPtr, value);
    } 
    get {
      ushort ret = RakNetPINVOKE.CSharp_RakNet_SocketDescriptor_remotePortRakNetWasStartedOn_PS3_PSP2_get(swigCPtr);
      return ret;
    } 
  }

  public int chromeInstance {
    set {
      RakNetPINVOKE.CSharp_RakNet_SocketDescriptor_chromeInstance_set(swigCPtr, value);
    } 
    get {
      int ret = RakNetPINVOKE.CSharp_RakNet_SocketDescriptor_chromeInstance_get(swigCPtr);
      return ret;
    } 
  }

  public bool blockingSocket {
    set {
      RakNetPINVOKE.CSharp_RakNet_SocketDescriptor_blockingSocket_set(swigCPtr, value);
    } 
    get {
      bool ret = RakNetPINVOKE.CSharp_RakNet_SocketDescriptor_blockingSocket_get(swigCPtr);
      return ret;
    } 
  }

  public uint extraSocketOptions {
    set {
      RakNetPINVOKE.CSharp_RakNet_SocketDescriptor_extraSocketOptions_set(swigCPtr, value);
    } 
    get {
      uint ret = RakNetPINVOKE.CSharp_RakNet_SocketDescriptor_extraSocketOptions_get(swigCPtr);
      return ret;
    } 
  }

}

}
