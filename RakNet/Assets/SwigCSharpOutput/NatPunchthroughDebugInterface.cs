//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace RakNet {

public class NatPunchthroughDebugInterface : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal NatPunchthroughDebugInterface(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(NatPunchthroughDebugInterface obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~NatPunchthroughDebugInterface() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RakNetPINVOKE.CSharp_RakNet_delete_NatPunchthroughDebugInterface(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public NatPunchthroughDebugInterface() : this(RakNetPINVOKE.CSharp_RakNet_new_NatPunchthroughDebugInterface(), true) {
    SwigDirectorConnect();
  }

  public virtual void OnClientMessage(string msg) {
    RakNetPINVOKE.CSharp_RakNet_NatPunchthroughDebugInterface_OnClientMessage(swigCPtr, msg);
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("OnClientMessage", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateNatPunchthroughDebugInterface_0(SwigDirectorOnClientMessage);
    RakNetPINVOKE.CSharp_RakNet_NatPunchthroughDebugInterface_director_connect(swigCPtr, swigDelegate0);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(NatPunchthroughDebugInterface));
    return hasDerivedMethod;
  }

  private void SwigDirectorOnClientMessage(string msg) {
    OnClientMessage(msg);
  }

  public delegate void SwigDelegateNatPunchthroughDebugInterface_0(string msg);

  private SwigDelegateNatPunchthroughDebugInterface_0 swigDelegate0;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(string) };
}

}
