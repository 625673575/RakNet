//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace RakNet {

public class UDPProxyClient : PluginInterface2 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal UDPProxyClient(global::System.IntPtr cPtr, bool cMemoryOwn) : base(RakNetPINVOKE.CSharp_RakNet_UDPProxyClient_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UDPProxyClient obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UDPProxyClient() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RakNetPINVOKE.CSharp_RakNet_delete_UDPProxyClient(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static UDPProxyClient GetInstance() {
    global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_UDPProxyClient_GetInstance();
    UDPProxyClient ret = (cPtr == global::System.IntPtr.Zero) ? null : new UDPProxyClient(cPtr, false);
    return ret;
  }

  public static void DestroyInstance(UDPProxyClient i) {
    RakNetPINVOKE.CSharp_RakNet_UDPProxyClient_DestroyInstance(UDPProxyClient.getCPtr(i));
  }

  public UDPProxyClient() : this(RakNetPINVOKE.CSharp_RakNet_new_UDPProxyClient(), true) {
  }

  public void SetResultHandler(UDPProxyClientResultHandler rh) {
    RakNetPINVOKE.CSharp_RakNet_UDPProxyClient_SetResultHandler(swigCPtr, UDPProxyClientResultHandler.getCPtr(rh));
  }

  public bool RequestForwarding(SystemAddress proxyCoordinator, SystemAddress sourceAddress, SystemAddress targetAddressAsSeenFromCoordinator, uint timeoutOnNoDataMS, BitStream serverSelectionBitstream) {
    bool ret = RakNetPINVOKE.CSharp_RakNet_UDPProxyClient_RequestForwarding__SWIG_0(swigCPtr, SystemAddress.getCPtr(proxyCoordinator), SystemAddress.getCPtr(sourceAddress), SystemAddress.getCPtr(targetAddressAsSeenFromCoordinator), timeoutOnNoDataMS, BitStream.getCPtr(serverSelectionBitstream));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool RequestForwarding(SystemAddress proxyCoordinator, SystemAddress sourceAddress, SystemAddress targetAddressAsSeenFromCoordinator, uint timeoutOnNoDataMS) {
    bool ret = RakNetPINVOKE.CSharp_RakNet_UDPProxyClient_RequestForwarding__SWIG_1(swigCPtr, SystemAddress.getCPtr(proxyCoordinator), SystemAddress.getCPtr(sourceAddress), SystemAddress.getCPtr(targetAddressAsSeenFromCoordinator), timeoutOnNoDataMS);
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool RequestForwarding(SystemAddress proxyCoordinator, SystemAddress sourceAddress, RakNetGUID targetGuid, uint timeoutOnNoDataMS, BitStream serverSelectionBitstream) {
    bool ret = RakNetPINVOKE.CSharp_RakNet_UDPProxyClient_RequestForwarding__SWIG_2(swigCPtr, SystemAddress.getCPtr(proxyCoordinator), SystemAddress.getCPtr(sourceAddress), RakNetGUID.getCPtr(targetGuid), timeoutOnNoDataMS, BitStream.getCPtr(serverSelectionBitstream));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool RequestForwarding(SystemAddress proxyCoordinator, SystemAddress sourceAddress, RakNetGUID targetGuid, uint timeoutOnNoDataMS) {
    bool ret = RakNetPINVOKE.CSharp_RakNet_UDPProxyClient_RequestForwarding__SWIG_3(swigCPtr, SystemAddress.getCPtr(proxyCoordinator), SystemAddress.getCPtr(sourceAddress), RakNetGUID.getCPtr(targetGuid), timeoutOnNoDataMS);
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public class ServerWithPing : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal ServerWithPing(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ServerWithPing obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~ServerWithPing() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            RakNetPINVOKE.CSharp_RakNet_delete_UDPProxyClient_ServerWithPing(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public ushort ping {
      set {
        RakNetPINVOKE.CSharp_RakNet_UDPProxyClient_ServerWithPing_ping_set(swigCPtr, value);
      } 
      get {
        ushort ret = RakNetPINVOKE.CSharp_RakNet_UDPProxyClient_ServerWithPing_ping_get(swigCPtr);
        return ret;
      } 
    }
  
    public SystemAddress serverAddress {
      set {
        RakNetPINVOKE.CSharp_RakNet_UDPProxyClient_ServerWithPing_serverAddress_set(swigCPtr, SystemAddress.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_UDPProxyClient_ServerWithPing_serverAddress_get(swigCPtr);
        SystemAddress ret = (cPtr == global::System.IntPtr.Zero) ? null : new SystemAddress(cPtr, false);
        return ret;
      } 
    }
  
    public ServerWithPing() : this(RakNetPINVOKE.CSharp_RakNet_new_UDPProxyClient_ServerWithPing(), true) {
    }
  
  }

  public class SenderAndTargetAddress : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal SenderAndTargetAddress(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SenderAndTargetAddress obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~SenderAndTargetAddress() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            RakNetPINVOKE.CSharp_RakNet_delete_UDPProxyClient_SenderAndTargetAddress(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public SystemAddress senderClientAddress {
      set {
        RakNetPINVOKE.CSharp_RakNet_UDPProxyClient_SenderAndTargetAddress_senderClientAddress_set(swigCPtr, SystemAddress.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_UDPProxyClient_SenderAndTargetAddress_senderClientAddress_get(swigCPtr);
        SystemAddress ret = (cPtr == global::System.IntPtr.Zero) ? null : new SystemAddress(cPtr, false);
        return ret;
      } 
    }
  
    public SystemAddress targetClientAddress {
      set {
        RakNetPINVOKE.CSharp_RakNet_UDPProxyClient_SenderAndTargetAddress_targetClientAddress_set(swigCPtr, SystemAddress.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_UDPProxyClient_SenderAndTargetAddress_targetClientAddress_get(swigCPtr);
        SystemAddress ret = (cPtr == global::System.IntPtr.Zero) ? null : new SystemAddress(cPtr, false);
        return ret;
      } 
    }
  
    public SenderAndTargetAddress() : this(RakNetPINVOKE.CSharp_RakNet_new_UDPProxyClient_SenderAndTargetAddress(), true) {
    }
  
  }

  public class PingServerGroup : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal PingServerGroup(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PingServerGroup obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~PingServerGroup() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            RakNetPINVOKE.CSharp_RakNet_delete_UDPProxyClient_PingServerGroup(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public UDPProxyClient.SenderAndTargetAddress sata {
      set {
        RakNetPINVOKE.CSharp_RakNet_UDPProxyClient_PingServerGroup_sata_set(swigCPtr, UDPProxyClient.SenderAndTargetAddress.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_UDPProxyClient_PingServerGroup_sata_get(swigCPtr);
        UDPProxyClient.SenderAndTargetAddress ret = (cPtr == global::System.IntPtr.Zero) ? null : new UDPProxyClient.SenderAndTargetAddress(cPtr, false);
        return ret;
      } 
    }
  
    public uint startPingTime {
      set {
        RakNetPINVOKE.CSharp_RakNet_UDPProxyClient_PingServerGroup_startPingTime_set(swigCPtr, value);
      } 
      get {
        uint ret = RakNetPINVOKE.CSharp_RakNet_UDPProxyClient_PingServerGroup_startPingTime_get(swigCPtr);
        return ret;
      } 
    }
  
    public SystemAddress coordinatorAddressForPings {
      set {
        RakNetPINVOKE.CSharp_RakNet_UDPProxyClient_PingServerGroup_coordinatorAddressForPings_set(swigCPtr, SystemAddress.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_UDPProxyClient_PingServerGroup_coordinatorAddressForPings_get(swigCPtr);
        SystemAddress ret = (cPtr == global::System.IntPtr.Zero) ? null : new SystemAddress(cPtr, false);
        return ret;
      } 
    }
  
    public SWIGTYPE_p_DataStructures__ListT_RakNet__UDPProxyClient__ServerWithPing_t serversToPing {
      set {
        RakNetPINVOKE.CSharp_RakNet_UDPProxyClient_PingServerGroup_serversToPing_set(swigCPtr, SWIGTYPE_p_DataStructures__ListT_RakNet__UDPProxyClient__ServerWithPing_t.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_UDPProxyClient_PingServerGroup_serversToPing_get(swigCPtr);
        SWIGTYPE_p_DataStructures__ListT_RakNet__UDPProxyClient__ServerWithPing_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_DataStructures__ListT_RakNet__UDPProxyClient__ServerWithPing_t(cPtr, false);
        return ret;
      } 
    }
  
    public bool AreAllServersPinged() {
      bool ret = RakNetPINVOKE.CSharp_RakNet_UDPProxyClient_PingServerGroup_AreAllServersPinged(swigCPtr);
      return ret;
    }
  
    public void SendPingedServersToCoordinator(RakPeerInterface rakPeerInterface) {
      RakNetPINVOKE.CSharp_RakNet_UDPProxyClient_PingServerGroup_SendPingedServersToCoordinator(swigCPtr, RakPeerInterface.getCPtr(rakPeerInterface));
    }
  
    public PingServerGroup() : this(RakNetPINVOKE.CSharp_RakNet_new_UDPProxyClient_PingServerGroup(), true) {
    }
  
  }

}

}
