//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace RakNet {

public class Router2 : PluginInterface2 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Router2(global::System.IntPtr cPtr, bool cMemoryOwn) : base(RakNetPINVOKE.CSharp_RakNet_Router2_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Router2 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Router2() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RakNetPINVOKE.CSharp_RakNet_delete_Router2(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static Router2 GetInstance() {
    global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_Router2_GetInstance();
    Router2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Router2(cPtr, false);
    return ret;
  }

  public static void DestroyInstance(Router2 i) {
    RakNetPINVOKE.CSharp_RakNet_Router2_DestroyInstance(Router2.getCPtr(i));
  }

  public Router2() : this(RakNetPINVOKE.CSharp_RakNet_new_Router2(), true) {
  }

  public void SetSocketFamily(ushort _socketFamily) {
    RakNetPINVOKE.CSharp_RakNet_Router2_SetSocketFamily(swigCPtr, _socketFamily);
  }

  public void EstablishRouting(RakNetGUID endpointGuid) {
    RakNetPINVOKE.CSharp_RakNet_Router2_EstablishRouting(swigCPtr, RakNetGUID.getCPtr(endpointGuid));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMaximumForwardingRequests(int max) {
    RakNetPINVOKE.CSharp_RakNet_Router2_SetMaximumForwardingRequests(swigCPtr, max);
  }

  public void SetDebugInterface(Router2DebugInterface _debugInterface) {
    RakNetPINVOKE.CSharp_RakNet_Router2_SetDebugInterface(swigCPtr, Router2DebugInterface.getCPtr(_debugInterface));
  }

  public Router2DebugInterface GetDebugInterface() {
    global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_Router2_GetDebugInterface(swigCPtr);
    Router2DebugInterface ret = (cPtr == global::System.IntPtr.Zero) ? null : new Router2DebugInterface(cPtr, false);
    return ret;
  }

  public class ConnectionRequestSystem : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal ConnectionRequestSystem(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ConnectionRequestSystem obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~ConnectionRequestSystem() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            RakNetPINVOKE.CSharp_RakNet_delete_Router2_ConnectionRequestSystem(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public RakNetGUID guid {
      set {
        RakNetPINVOKE.CSharp_RakNet_Router2_ConnectionRequestSystem_guid_set(swigCPtr, RakNetGUID.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_Router2_ConnectionRequestSystem_guid_get(swigCPtr);
        RakNetGUID ret = (cPtr == global::System.IntPtr.Zero) ? null : new RakNetGUID(cPtr, false);
        return ret;
      } 
    }
  
    public int pingToEndpoint {
      set {
        RakNetPINVOKE.CSharp_RakNet_Router2_ConnectionRequestSystem_pingToEndpoint_set(swigCPtr, value);
      } 
      get {
        int ret = RakNetPINVOKE.CSharp_RakNet_Router2_ConnectionRequestSystem_pingToEndpoint_get(swigCPtr);
        return ret;
      } 
    }
  
    public ushort usedForwardingEntries {
      set {
        RakNetPINVOKE.CSharp_RakNet_Router2_ConnectionRequestSystem_usedForwardingEntries_set(swigCPtr, value);
      } 
      get {
        ushort ret = RakNetPINVOKE.CSharp_RakNet_Router2_ConnectionRequestSystem_usedForwardingEntries_get(swigCPtr);
        return ret;
      } 
    }
  
    public ConnectionRequestSystem() : this(RakNetPINVOKE.CSharp_RakNet_new_Router2_ConnectionRequestSystem(), true) {
    }
  
  }

  public class ConnnectRequest : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal ConnnectRequest(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ConnnectRequest obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~ConnnectRequest() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            RakNetPINVOKE.CSharp_RakNet_delete_Router2_ConnnectRequest(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public ConnnectRequest() : this(RakNetPINVOKE.CSharp_RakNet_new_Router2_ConnnectRequest(), true) {
    }
  
    public SWIGTYPE_p_DataStructures__ListT_RakNet__Router2__ConnectionRequestSystem_t connectionRequestSystems {
      set {
        RakNetPINVOKE.CSharp_RakNet_Router2_ConnnectRequest_connectionRequestSystems_set(swigCPtr, SWIGTYPE_p_DataStructures__ListT_RakNet__Router2__ConnectionRequestSystem_t.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_Router2_ConnnectRequest_connectionRequestSystems_get(swigCPtr);
        SWIGTYPE_p_DataStructures__ListT_RakNet__Router2__ConnectionRequestSystem_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_DataStructures__ListT_RakNet__Router2__ConnectionRequestSystem_t(cPtr, false);
        return ret;
      } 
    }
  
    public SimpleMutex connectionRequestSystemsMutex {
      set {
        RakNetPINVOKE.CSharp_RakNet_Router2_ConnnectRequest_connectionRequestSystemsMutex_set(swigCPtr, SimpleMutex.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_Router2_ConnnectRequest_connectionRequestSystemsMutex_get(swigCPtr);
        SimpleMutex ret = (cPtr == global::System.IntPtr.Zero) ? null : new SimpleMutex(cPtr, false);
        return ret;
      } 
    }
  
    public Router2.Router2RequestStates requestState {
      set {
        RakNetPINVOKE.CSharp_RakNet_Router2_ConnnectRequest_requestState_set(swigCPtr, (int)value);
      } 
      get {
        Router2.Router2RequestStates ret = (Router2.Router2RequestStates)RakNetPINVOKE.CSharp_RakNet_Router2_ConnnectRequest_requestState_get(swigCPtr);
        return ret;
      } 
    }
  
    public uint pingTimeout {
      set {
        RakNetPINVOKE.CSharp_RakNet_Router2_ConnnectRequest_pingTimeout_set(swigCPtr, value);
      } 
      get {
        uint ret = RakNetPINVOKE.CSharp_RakNet_Router2_ConnnectRequest_pingTimeout_get(swigCPtr);
        return ret;
      } 
    }
  
    public RakNetGUID endpointGuid {
      set {
        RakNetPINVOKE.CSharp_RakNet_Router2_ConnnectRequest_endpointGuid_set(swigCPtr, RakNetGUID.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_Router2_ConnnectRequest_endpointGuid_get(swigCPtr);
        RakNetGUID ret = (cPtr == global::System.IntPtr.Zero) ? null : new RakNetGUID(cPtr, false);
        return ret;
      } 
    }
  
    public RakNetGUID lastRequestedForwardingSystem {
      set {
        RakNetPINVOKE.CSharp_RakNet_Router2_ConnnectRequest_lastRequestedForwardingSystem_set(swigCPtr, RakNetGUID.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_Router2_ConnnectRequest_lastRequestedForwardingSystem_get(swigCPtr);
        RakNetGUID ret = (cPtr == global::System.IntPtr.Zero) ? null : new RakNetGUID(cPtr, false);
        return ret;
      } 
    }
  
    public bool returnConnectionLostOnFailure {
      set {
        RakNetPINVOKE.CSharp_RakNet_Router2_ConnnectRequest_returnConnectionLostOnFailure_set(swigCPtr, value);
      } 
      get {
        bool ret = RakNetPINVOKE.CSharp_RakNet_Router2_ConnnectRequest_returnConnectionLostOnFailure_get(swigCPtr);
        return ret;
      } 
    }
  
    public uint GetGuidIndex(RakNetGUID guid) {
      uint ret = RakNetPINVOKE.CSharp_RakNet_Router2_ConnnectRequest_GetGuidIndex(swigCPtr, RakNetGUID.getCPtr(guid));
      if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
  }

  public uint GetConnectionRequestIndex(RakNetGUID endpointGuid) {
    uint ret = RakNetPINVOKE.CSharp_RakNet_Router2_GetConnectionRequestIndex(swigCPtr, RakNetGUID.getCPtr(endpointGuid));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public class MiniPunchRequest : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal MiniPunchRequest(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MiniPunchRequest obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~MiniPunchRequest() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            RakNetPINVOKE.CSharp_RakNet_delete_Router2_MiniPunchRequest(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public RakNetGUID endpointGuid {
      set {
        RakNetPINVOKE.CSharp_RakNet_Router2_MiniPunchRequest_endpointGuid_set(swigCPtr, RakNetGUID.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_Router2_MiniPunchRequest_endpointGuid_get(swigCPtr);
        RakNetGUID ret = (cPtr == global::System.IntPtr.Zero) ? null : new RakNetGUID(cPtr, false);
        return ret;
      } 
    }
  
    public SystemAddress endpointAddress {
      set {
        RakNetPINVOKE.CSharp_RakNet_Router2_MiniPunchRequest_endpointAddress_set(swigCPtr, SystemAddress.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_Router2_MiniPunchRequest_endpointAddress_get(swigCPtr);
        SystemAddress ret = (cPtr == global::System.IntPtr.Zero) ? null : new SystemAddress(cPtr, false);
        return ret;
      } 
    }
  
    public bool gotReplyFromEndpoint {
      set {
        RakNetPINVOKE.CSharp_RakNet_Router2_MiniPunchRequest_gotReplyFromEndpoint_set(swigCPtr, value);
      } 
      get {
        bool ret = RakNetPINVOKE.CSharp_RakNet_Router2_MiniPunchRequest_gotReplyFromEndpoint_get(swigCPtr);
        return ret;
      } 
    }
  
    public RakNetGUID sourceGuid {
      set {
        RakNetPINVOKE.CSharp_RakNet_Router2_MiniPunchRequest_sourceGuid_set(swigCPtr, RakNetGUID.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_Router2_MiniPunchRequest_sourceGuid_get(swigCPtr);
        RakNetGUID ret = (cPtr == global::System.IntPtr.Zero) ? null : new RakNetGUID(cPtr, false);
        return ret;
      } 
    }
  
    public SystemAddress sourceAddress {
      set {
        RakNetPINVOKE.CSharp_RakNet_Router2_MiniPunchRequest_sourceAddress_set(swigCPtr, SystemAddress.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_Router2_MiniPunchRequest_sourceAddress_get(swigCPtr);
        SystemAddress ret = (cPtr == global::System.IntPtr.Zero) ? null : new SystemAddress(cPtr, false);
        return ret;
      } 
    }
  
    public bool gotReplyFromSource {
      set {
        RakNetPINVOKE.CSharp_RakNet_Router2_MiniPunchRequest_gotReplyFromSource_set(swigCPtr, value);
      } 
      get {
        bool ret = RakNetPINVOKE.CSharp_RakNet_Router2_MiniPunchRequest_gotReplyFromSource_get(swigCPtr);
        return ret;
      } 
    }
  
    public uint timeout {
      set {
        RakNetPINVOKE.CSharp_RakNet_Router2_MiniPunchRequest_timeout_set(swigCPtr, value);
      } 
      get {
        uint ret = RakNetPINVOKE.CSharp_RakNet_Router2_MiniPunchRequest_timeout_get(swigCPtr);
        return ret;
      } 
    }
  
    public uint nextAction {
      set {
        RakNetPINVOKE.CSharp_RakNet_Router2_MiniPunchRequest_nextAction_set(swigCPtr, value);
      } 
      get {
        uint ret = RakNetPINVOKE.CSharp_RakNet_Router2_MiniPunchRequest_nextAction_get(swigCPtr);
        return ret;
      } 
    }
  
    public ushort forwardingPort {
      set {
        RakNetPINVOKE.CSharp_RakNet_Router2_MiniPunchRequest_forwardingPort_set(swigCPtr, value);
      } 
      get {
        ushort ret = RakNetPINVOKE.CSharp_RakNet_Router2_MiniPunchRequest_forwardingPort_get(swigCPtr);
        return ret;
      } 
    }
  
    public int forwardingSocket {
      set {
        RakNetPINVOKE.CSharp_RakNet_Router2_MiniPunchRequest_forwardingSocket_set(swigCPtr, value);
      } 
      get {
        int ret = RakNetPINVOKE.CSharp_RakNet_Router2_MiniPunchRequest_forwardingSocket_get(swigCPtr);
        return ret;
      } 
    }
  
    public MiniPunchRequest() : this(RakNetPINVOKE.CSharp_RakNet_new_Router2_MiniPunchRequest(), true) {
    }
  
  }

  public class ForwardedConnection : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal ForwardedConnection(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ForwardedConnection obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~ForwardedConnection() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            RakNetPINVOKE.CSharp_RakNet_delete_Router2_ForwardedConnection(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public RakNetGUID endpointGuid {
      set {
        RakNetPINVOKE.CSharp_RakNet_Router2_ForwardedConnection_endpointGuid_set(swigCPtr, RakNetGUID.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_Router2_ForwardedConnection_endpointGuid_get(swigCPtr);
        RakNetGUID ret = (cPtr == global::System.IntPtr.Zero) ? null : new RakNetGUID(cPtr, false);
        return ret;
      } 
    }
  
    public RakNetGUID intermediaryGuid {
      set {
        RakNetPINVOKE.CSharp_RakNet_Router2_ForwardedConnection_intermediaryGuid_set(swigCPtr, RakNetGUID.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_Router2_ForwardedConnection_intermediaryGuid_get(swigCPtr);
        RakNetGUID ret = (cPtr == global::System.IntPtr.Zero) ? null : new RakNetGUID(cPtr, false);
        return ret;
      } 
    }
  
    public SystemAddress intermediaryAddress {
      set {
        RakNetPINVOKE.CSharp_RakNet_Router2_ForwardedConnection_intermediaryAddress_set(swigCPtr, SystemAddress.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_Router2_ForwardedConnection_intermediaryAddress_get(swigCPtr);
        SystemAddress ret = (cPtr == global::System.IntPtr.Zero) ? null : new SystemAddress(cPtr, false);
        return ret;
      } 
    }
  
    public bool returnConnectionLostOnFailure {
      set {
        RakNetPINVOKE.CSharp_RakNet_Router2_ForwardedConnection_returnConnectionLostOnFailure_set(swigCPtr, value);
      } 
      get {
        bool ret = RakNetPINVOKE.CSharp_RakNet_Router2_ForwardedConnection_returnConnectionLostOnFailure_get(swigCPtr);
        return ret;
      } 
    }
  
    public bool weInitiatedForwarding {
      set {
        RakNetPINVOKE.CSharp_RakNet_Router2_ForwardedConnection_weInitiatedForwarding_set(swigCPtr, value);
      } 
      get {
        bool ret = RakNetPINVOKE.CSharp_RakNet_Router2_ForwardedConnection_weInitiatedForwarding_get(swigCPtr);
        return ret;
      } 
    }
  
    public ForwardedConnection() : this(RakNetPINVOKE.CSharp_RakNet_new_Router2_ForwardedConnection(), true) {
    }
  
  }

  public enum Router2RequestStates {
    R2RS_REQUEST_STATE_QUERY_FORWARDING,
    REQUEST_STATE_REQUEST_FORWARDING
  }

}

}
