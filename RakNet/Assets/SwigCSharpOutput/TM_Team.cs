//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace RakNet {

public class TM_Team : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TM_Team(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TM_Team obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~TM_Team() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RakNetPINVOKE.CSharp_RakNet_delete_TM_Team(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static TM_Team GetInstance() {
    global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_TM_Team_GetInstance();
    TM_Team ret = (cPtr == global::System.IntPtr.Zero) ? null : new TM_Team(cPtr, false);
    return ret;
  }

  public static void DestroyInstance(TM_Team i) {
    RakNetPINVOKE.CSharp_RakNet_TM_Team_DestroyInstance(TM_Team.getCPtr(i));
  }

  public TM_Team() : this(RakNetPINVOKE.CSharp_RakNet_new_TM_Team(), true) {
  }

  public bool SetMemberLimit(ushort _teamMemberLimit, byte noTeamSubcategory) {
    bool ret = RakNetPINVOKE.CSharp_RakNet_TM_Team_SetMemberLimit(swigCPtr, _teamMemberLimit, noTeamSubcategory);
    return ret;
  }

  public ushort GetMemberLimit() {
    ushort ret = RakNetPINVOKE.CSharp_RakNet_TM_Team_GetMemberLimit(swigCPtr);
    return ret;
  }

  public ushort GetMemberLimitSetting() {
    ushort ret = RakNetPINVOKE.CSharp_RakNet_TM_Team_GetMemberLimitSetting(swigCPtr);
    return ret;
  }

  public bool SetJoinPermissions(byte _joinPermissions) {
    bool ret = RakNetPINVOKE.CSharp_RakNet_TM_Team_SetJoinPermissions(swigCPtr, _joinPermissions);
    return ret;
  }

  public byte GetJoinPermissions() {
    byte ret = RakNetPINVOKE.CSharp_RakNet_TM_Team_GetJoinPermissions(swigCPtr);
    return ret;
  }

  public void LeaveTeam(TM_TeamMember teamMember, byte noTeamSubcategory) {
    RakNetPINVOKE.CSharp_RakNet_TM_Team_LeaveTeam(swigCPtr, TM_TeamMember.getCPtr(teamMember), noTeamSubcategory);
  }

  public bool GetBalancingApplies() {
    bool ret = RakNetPINVOKE.CSharp_RakNet_TM_Team_GetBalancingApplies(swigCPtr);
    return ret;
  }

  public void GetTeamMembers(SWIGTYPE_p_DataStructures__ListT_RakNet__TM_TeamMember_p_t _teamMembers) {
    RakNetPINVOKE.CSharp_RakNet_TM_Team_GetTeamMembers(swigCPtr, SWIGTYPE_p_DataStructures__ListT_RakNet__TM_TeamMember_p_t.getCPtr(_teamMembers));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetTeamMembersCount() {
    uint ret = RakNetPINVOKE.CSharp_RakNet_TM_Team_GetTeamMembersCount(swigCPtr);
    return ret;
  }

  public TM_TeamMember GetTeamMemberByIndex(uint index) {
    global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_TM_Team_GetTeamMemberByIndex(swigCPtr, index);
    TM_TeamMember ret = (cPtr == global::System.IntPtr.Zero) ? null : new TM_TeamMember(cPtr, false);
    return ret;
  }

  public ulong GetNetworkID() {
    ulong ret = RakNetPINVOKE.CSharp_RakNet_TM_Team_GetNetworkID(swigCPtr);
    return ret;
  }

  public TM_World GetTM_World() {
    global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_TM_Team_GetTM_World(swigCPtr);
    TM_World ret = (cPtr == global::System.IntPtr.Zero) ? null : new TM_World(cPtr, false);
    return ret;
  }

  public void SerializeConstruction(BitStream constructionBitstream) {
    RakNetPINVOKE.CSharp_RakNet_TM_Team_SerializeConstruction(swigCPtr, BitStream.getCPtr(constructionBitstream));
  }

  public bool DeserializeConstruction(TeamManager teamManager, BitStream constructionBitstream) {
    bool ret = RakNetPINVOKE.CSharp_RakNet_TM_Team_DeserializeConstruction(swigCPtr, TeamManager.getCPtr(teamManager), BitStream.getCPtr(constructionBitstream));
    return ret;
  }

  public void SetOwner(SWIGTYPE_p_void o) {
    RakNetPINVOKE.CSharp_RakNet_TM_Team_SetOwner(swigCPtr, SWIGTYPE_p_void.getCPtr(o));
  }

  public SWIGTYPE_p_void GetOwner() {
    global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_TM_Team_GetOwner(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public uint GetWorldIndex() {
    uint ret = RakNetPINVOKE.CSharp_RakNet_TM_Team_GetWorldIndex(swigCPtr);
    return ret;
  }

  public static uint ToUint32(ulong g) {
    uint ret = RakNetPINVOKE.CSharp_RakNet_TM_Team_ToUint32(g);
    return ret;
  }

}

}
