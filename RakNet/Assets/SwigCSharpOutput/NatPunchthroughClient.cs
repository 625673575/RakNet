//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace RakNet {

public class NatPunchthroughClient : PluginInterface2 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal NatPunchthroughClient(global::System.IntPtr cPtr, bool cMemoryOwn) : base(RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(NatPunchthroughClient obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~NatPunchthroughClient() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RakNetPINVOKE.CSharp_RakNet_delete_NatPunchthroughClient(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static NatPunchthroughClient GetInstance() {
    global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_GetInstance();
    NatPunchthroughClient ret = (cPtr == global::System.IntPtr.Zero) ? null : new NatPunchthroughClient(cPtr, false);
    return ret;
  }

  public static void DestroyInstance(NatPunchthroughClient i) {
    RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_DestroyInstance(NatPunchthroughClient.getCPtr(i));
  }

  public NatPunchthroughClient() : this(RakNetPINVOKE.CSharp_RakNet_new_NatPunchthroughClient(), true) {
  }

  public void FindRouterPortStride(SystemAddress facilitator) {
    RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_FindRouterPortStride(swigCPtr, SystemAddress.getCPtr(facilitator));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool OpenNAT(RakNetGUID destination, SystemAddress facilitator) {
    bool ret = RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_OpenNAT(swigCPtr, RakNetGUID.getCPtr(destination), SystemAddress.getCPtr(facilitator));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PunchthroughConfiguration GetPunchthroughConfiguration() {
    global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_GetPunchthroughConfiguration(swigCPtr);
    PunchthroughConfiguration ret = (cPtr == global::System.IntPtr.Zero) ? null : new PunchthroughConfiguration(cPtr, false);
    return ret;
  }

  public void SetDebugInterface(NatPunchthroughDebugInterface i) {
    RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_SetDebugInterface(swigCPtr, NatPunchthroughDebugInterface.getCPtr(i));
  }

  public void GetUPNPPortMappings(string externalPort, string internalPort, SystemAddress natPunchthroughServerAddress) {
    RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_GetUPNPPortMappings(swigCPtr, externalPort, internalPort, SystemAddress.getCPtr(natPunchthroughServerAddress));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Clear() {
    RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_Clear(swigCPtr);
  }

  public class SendPing : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal SendPing(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SendPing obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~SendPing() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            RakNetPINVOKE.CSharp_RakNet_delete_NatPunchthroughClient_SendPing(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public ulong nextActionTime {
      set {
        RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_SendPing_nextActionTime_set(swigCPtr, value);
      } 
      get {
        ulong ret = RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_SendPing_nextActionTime_get(swigCPtr);
        return ret;
      } 
    }
  
    public SystemAddress targetAddress {
      set {
        RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_SendPing_targetAddress_set(swigCPtr, SystemAddress.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_SendPing_targetAddress_get(swigCPtr);
        SystemAddress ret = (cPtr == global::System.IntPtr.Zero) ? null : new SystemAddress(cPtr, false);
        return ret;
      } 
    }
  
    public SystemAddress facilitator {
      set {
        RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_SendPing_facilitator_set(swigCPtr, SystemAddress.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_SendPing_facilitator_get(swigCPtr);
        SystemAddress ret = (cPtr == global::System.IntPtr.Zero) ? null : new SystemAddress(cPtr, false);
        return ret;
      } 
    }
  
    public SystemAddress internalIds {
      set {
        RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_SendPing_internalIds_set(swigCPtr, SystemAddress.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_SendPing_internalIds_get(swigCPtr);
        SystemAddress ret = (cPtr == global::System.IntPtr.Zero) ? null : new SystemAddress(cPtr, false);
        return ret;
      } 
    }
  
    public RakNetGUID targetGuid {
      set {
        RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_SendPing_targetGuid_set(swigCPtr, RakNetGUID.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_SendPing_targetGuid_get(swigCPtr);
        RakNetGUID ret = (cPtr == global::System.IntPtr.Zero) ? null : new RakNetGUID(cPtr, false);
        return ret;
      } 
    }
  
    public bool weAreSender {
      set {
        RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_SendPing_weAreSender_set(swigCPtr, value);
      } 
      get {
        bool ret = RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_SendPing_weAreSender_get(swigCPtr);
        return ret;
      } 
    }
  
    public int attemptCount {
      set {
        RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_SendPing_attemptCount_set(swigCPtr, value);
      } 
      get {
        int ret = RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_SendPing_attemptCount_get(swigCPtr);
        return ret;
      } 
    }
  
    public int retryCount {
      set {
        RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_SendPing_retryCount_set(swigCPtr, value);
      } 
      get {
        int ret = RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_SendPing_retryCount_get(swigCPtr);
        return ret;
      } 
    }
  
    public int punchingFixedPortAttempts {
      set {
        RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_SendPing_punchingFixedPortAttempts_set(swigCPtr, value);
      } 
      get {
        int ret = RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_SendPing_punchingFixedPortAttempts_get(swigCPtr);
        return ret;
      } 
    }
  
    public ushort sessionId {
      set {
        RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_SendPing_sessionId_set(swigCPtr, value);
      } 
      get {
        ushort ret = RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_SendPing_sessionId_get(swigCPtr);
        return ret;
      } 
    }
  
    public bool sentTTL {
      set {
        RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_SendPing_sentTTL_set(swigCPtr, value);
      } 
      get {
        bool ret = RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_SendPing_sentTTL_get(swigCPtr);
        return ret;
      } 
    }
  
    public NatPunchthroughClient.SendPing.TestMode testMode {
      set {
        RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_SendPing_testMode_set(swigCPtr, (int)value);
      } 
      get {
        NatPunchthroughClient.SendPing.TestMode ret = (NatPunchthroughClient.SendPing.TestMode)RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_SendPing_testMode_get(swigCPtr);
        return ret;
      } 
    }
  
    public SendPing() : this(RakNetPINVOKE.CSharp_RakNet_new_NatPunchthroughClient_SendPing(), true) {
    }
  
    public enum TestMode {
      TESTING_INTERNAL_IPS,
      WAITING_FOR_INTERNAL_IPS_RESPONSE,
      TESTING_EXTERNAL_IPS_FACILITATOR_PORT_TO_FACILITATOR_PORT,
      TESTING_EXTERNAL_IPS_1024_TO_FACILITATOR_PORT,
      TESTING_EXTERNAL_IPS_FACILITATOR_PORT_TO_1024,
      TESTING_EXTERNAL_IPS_1024_TO_1024,
      WAITING_AFTER_ALL_ATTEMPTS,
      PUNCHING_FIXED_PORT
    }
  
  }

  public NatPunchthroughClient.SendPing sp {
    set {
      RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_sp_set(swigCPtr, NatPunchthroughClient.SendPing.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = RakNetPINVOKE.CSharp_RakNet_NatPunchthroughClient_sp_get(swigCPtr);
      NatPunchthroughClient.SendPing ret = (cPtr == global::System.IntPtr.Zero) ? null : new NatPunchthroughClient.SendPing(cPtr, false);
      return ret;
    } 
  }

}

}
